generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(cuid())
  name                   String
  slug                   String           @unique
  specialty              String?
  email                  String           @unique
  password               String
  phone                  String?
  emailVerified          DateTime?
  image                  String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime         @default(now())
  accounts               Account[]
  Checkpoint             Checkpoint[]
  Circle                 Circle[]
  Cycle                  Cycle[]
  EisenhowerTask         EisenhowerTask[]
  events                 Event[]
  Habit                  Habit[]
  indications            Indication[]
  leads                  Lead[]
  Outbound               Outbound[]
  PomodoroStar           PomodoroStar[]
  sessions               Session[]
  Thought                Thought[]
}

model Indication {
  id        String   @id @default(cuid())
  slug      String
  userId    String
  createdAt DateTime @default(now())
  name      String?
  events    Event[]
  user      User     @relation(fields: [userId], references: [id])
  leads     Lead[]
}

model Lead {
  id              String      @id @default(cuid())
  name            String
  phone           String
  interest        String?
  userId          String
  indicationId    String?
  source          String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  status          String?     @default("Novo")
  potentialValue  Float?
  appointmentDate DateTime?
  medicalNotes    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  indication      Indication? @relation(fields: [indicationId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
}

model Event {
  id           String      @id @default(cuid())
  userId       String
  indicationId String?
  type         String
  ip           String?
  userAgent    String?
  createdAt    DateTime    @default(now())
  utmCampaign  String?
  utmContent   String?
  utmMedium    String?
  utmSource    String?
  utmTerm      String?
  indication   Indication? @relation(fields: [indicationId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Checkpoint {
  id          String   @id
  userId      String
  title       String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Circle {
  id          String   @id
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cycle {
  id        String   @id
  userId    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Week      Week[]
}

model Day {
  id        String   @id
  weekId    String
  date      DateTime
  createdAt DateTime @default(now())
  Week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  Task      Task[]

  @@unique([weekId, date])
}

model DayProgress {
  id        String   @id
  habitId   String
  date      DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  Habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
}

model EisenhowerTask {
  id          String   @id
  userId      String
  title       String
  description String?
  urgent      Boolean  @default(false)
  important   Boolean  @default(false)
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String   @id
  weekId      String
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  Week        Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
}

model Habit {
  id          String        @id
  userId      String
  name        String
  description String?
  frequency   String
  completed   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  DayProgress DayProgress[]
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KeyResult {
  id          String   @id
  weekId      String
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  Week        Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
}

model PomodoroStar {
  id        String   @id
  userId    String
  date      DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id            String   @id
  title         String
  completed     Boolean  @default(false)
  timeBlock     String
  scheduledTime String?
  dayId         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Day           Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model Thought {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Week {
  id        String      @id
  cycleId   String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime    @default(now())
  Day       Day[]
  Goal      Goal[]
  KeyResult KeyResult[]
  Cycle     Cycle       @relation(fields: [cycleId], references: [id], onDelete: Cascade)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Outbound {
  id            String               @id
  userId        String
  nome          String
  especialidade String?
  imagem        String?
  instagram     String?
  whatsapp      String?
  email         String?
  status        String?              @default("prospectado")
  observacoes   String?
  endereco      String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now()) @updatedAt
  interactions  ContactInteraction[]
  User          User                 @relation(fields: [userId], references: [id])
  clinics       OutboundClinic[]

  @@index([userId])
}

model Clinic {
  id             String           @id @default(cuid())
  nome           String
  localizacao    String?
  mediaDeMedicos Int?
  instagram      String?
  site           String?
  linkBio        String?
  contato        String?
  email          String?
  whatsapp       String?
  observacoes    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  outbounds      OutboundClinic[]

  @@index([nome])
}

model OutboundClinic {
  outboundId String
  clinicId   String
  assignedAt DateTime @default(now())
  clinic     Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  outbound   Outbound @relation(fields: [outboundId], references: [id], onDelete: Cascade)

  @@id([outboundId, clinicId])
  @@index([outboundId])
  @@index([clinicId])
}

model ContactInteraction {
  id         String   @id @default(cuid())
  outboundId String
  content    String
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  outbound   Outbound @relation(fields: [outboundId], references: [id], onDelete: Cascade)

  @@index([outboundId])
}

model FactEntry {
  id                     Int      @id @default(autoincrement())
  period                 String   // Ex: "2025-01"
  version                String   // Ex: "Actual"
  scenario               String   // Ex: "Base Case"
  bu                     String   // Unidade de Neg√≥cio
  region                 String
  channel                String
  productSku             String
  customer               String
  costCenterCode         String
  glAccount              String
  pnlLine                String   // Ex: Net Revenue, SG&A, etc.
  value                  Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  importedAt             DateTime @default(now())
  product                ProductInfo @relation(fields: [productSku], references: [sku])
  costCenter             CostCenterInfo @relation(fields: [costCenterCode], references: [code])
}

model ProductInfo {
  sku                   String   @id // mesma chave do FactEntry
  description           String?
  factEntries          FactEntry[]
}

model CostCenterInfo {
  code                  String   @id
  description           String?
  factEntries          FactEntry[]
}

model PivotSnapshot {
  id          String   @id @default(cuid())
  name        String
  description String?
  config      Json
  data        Json
  totals      Json
  metadata    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
